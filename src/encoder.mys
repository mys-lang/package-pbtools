from . import WireType

func _sint32_encode(value: i32) -> u32:
    if value < 0:
        return ~(u32(value) << 1)
    else:
        return u32(value) << 1

func _sint64_encode(value: i64) -> u64:
    if value < 0:
        return ~(u64(value) << 1)
    else:
        return u64(value) << 1

class Encoder:
    _length: u64
    _parts: [bytes]

    func __init__(self):
        self._length = 0
        self._parts = []

    func _write(self, value: bytes):
        self._length += len(value)
        self._parts.append(value)

    func write_length_delimited(self, field_number: i64, value: u64):
        self._write_varint(value)
        self._write_tag(field_number, WireType.LengthDelimited)

    func _write_tagged_varint(self, field_number: i64, wire_type: WireType, value: u64):
        if value == 0:
            return

        self._write_varint(value)
        self._write_tag(field_number, wire_type)

    func _write_varint(self, value: u64):
        buf = b""

        while True:
            buf += u8(value | 0x80)
            value >>= 7

            if value == 0:
                break

        buf[-1] &= 0x7f
        self._write(buf)

    func _write_tag(self, field_number: i64, wire_type: WireType):
        self._write_varint(u64((field_number << 3) | i64(wire_type)))

    func _write_tagged_varint_always(self,
                                    field_number: i64,
                                    wire_type: WireType,
                                    value: u64):
        self._write_varint(value)
        self._write_tag(field_number, wire_type)

    func length(self) -> u64:
        return self._length

    func finalize(self) -> bytes:
        value = b""

        for part in reversed(self._parts):
            value += part

        return value

    func write_int32(self, field_number: i64, value: i32):
        self._write_tagged_varint(field_number, WireType.Varint, u64(i64(value)))

    func write_int64(self, field_number: i64, value: i64):
        self._write_tagged_varint(field_number, WireType.Varint, u64(value))

    func write_sint32(self, field_number: i64, value: i32):
        self.write_sint64(field_number, i64(value))

    func write_sint64(self, field_number: i64, value: i64):
        self.write_uint64(field_number, _sint64_encode(value))

    func write_uint32(self, field_number: i64, value: u32):
        raise NotImplementedError()

    func write_uint64(self, field_number: i64, value: u64):
        raise NotImplementedError()

    func write_fixed32(self, field_number: i64, value: u32):
        raise NotImplementedError()

    func write_fixed64(self, field_number: i64, value: u64):
        raise NotImplementedError()

    func write_sfixed32(self, field_number: i64, value: i32):
        raise NotImplementedError()

    func write_sfixed64(self, field_number: i64, value: i64):
        raise NotImplementedError()

    func write_float(self, field_number: i64, value: f32):
        raise NotImplementedError()

    func write_double(self, field_number: i64, value: f64):
        raise NotImplementedError()

    func write_bool(self, field_number: i64, value: bool):
        raise NotImplementedError()

    func write_enum(self, field_number: i64, value: i32):
        self.write_int32(field_number, i32(value))

    func write_string(self, field_number: i64, value: string):
        if len(value) == 0:
            return

        data = value.to_utf8()
        self._write(data)
        self._write_tagged_varint(field_number, WireType.LengthDelimited, len(data))

    func write_bytes(self, field_number: i64, value: bytes):
        raise NotImplementedError()

    func write_int32_always(self, field_number: i64, value: i32):
        self._write_tagged_varint_always(field_number,
                                         WireType.Varint,
                                         u64(i64(value)))

    func write_int64_always(self, field_number: i64, value: i64):
        raise NotImplementedError()

    func write_sint32_always(self, field_number: i64, value: i32):
        raise NotImplementedError()

    func write_sint64_always(self, field_number: i64, value: i64):
        raise NotImplementedError()

    func write_uint32_always(self, field_number: i64, value: i32):
        raise NotImplementedError()

    func write_uint64_always(self, field_number: i64, value: i64):
        raise NotImplementedError()

    func write_fixed32_always(self, field_number: i64, value: i32):
        raise NotImplementedError()

    func write_fixed64_always(self, field_number: i64, value: i64):
        raise NotImplementedError()

    func write_sfixed32_always(self, field_number: i64, value: i32):
        raise NotImplementedError()

    func write_sfixed64_always(self, field_number: i64, value: i64):
        raise NotImplementedError()

    func write_float_always(self, field_number: i64, value: f32):
        raise NotImplementedError()

    func write_double_always(self, field_number: i64, value: f64):
        raise NotImplementedError()

    func write_bool_always(self, field_number: i64, value: bool):
        self.write_int32_always(field_number, i32(value))

    func write_enum_always(self, field_number: i64, value: i32):
        raise NotImplementedError()

    func write_string_always(self, field_number: i64, value: string):
        raise NotImplementedError()

    func write_bytes_always(self, field_number: i64, value: bytes):
        raise NotImplementedError()

    func write_repeated_int32(self, field_number: i64, value: [i32]):
        raise NotImplementedError()

    func write_repeated_int64(self, field_number: i64, value: [i64]):
        raise NotImplementedError()

    func write_repeated_sint32(self, field_number: i64, value: [i32]):
        raise NotImplementedError()

    func write_repeated_sint64(self, field_number: i64, value: [i64]):
        raise NotImplementedError()

    func write_repeated_uint32(self, field_number: i64, value: [u32]):
        raise NotImplementedError()

    func write_repeated_uint64(self, field_number: i64, value: [u64]):
        raise NotImplementedError()

    func write_repeated_fixed32(self, field_number: i64, value: [u32]):
        raise NotImplementedError()

    func write_repeated_fixed64(self, field_number: i64, value: [u64]):
        raise NotImplementedError()

    func write_repeated_sfixed32(self, field_number: i64, value: [i32]):
        raise NotImplementedError()

    func write_repeated_sfixed64(self, field_number: i64, value: [i64]):
        raise NotImplementedError()

    func write_repeated_float(self, field_number: i64, value: [f32]):
        raise NotImplementedError()

    func write_repeated_double(self, field_number: i64, value: [f64]):
        raise NotImplementedError()

    func write_repeated_bool(self, field_number: i64, value: [bool]):
        raise NotImplementedError()

    func write_repeated_string(self, field_number: i64, value: [string]):
        raise NotImplementedError()

    func write_repeated_bytes(self, field_number: i64, value: [bytes]):
        raise NotImplementedError()
